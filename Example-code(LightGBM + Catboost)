{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1230,"status":"ok","timestamp":1670479344194,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"},"user_tz":420},"id":"hkGnKCXdLaoo","outputId":"55fe3a1b-4cb7-48bb-e367-28dad1716546"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QtCJXufj0jFF"},"outputs":[],"source":["# Import necessary libraries\n","import pandas as pd\n","import numpy as np\n","import os\n","import glob\n","import re\n","import matplotlib.pyplot as plt\n","from scipy import signal\n","import statsmodels.api as sm\n","import datetime"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":370,"status":"ok","timestamp":1670479380799,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"},"user_tz":420},"id":"9Ehndrkv0o2P","outputId":"513550e2-218e-4a82-ec3e-71ec9ceabe44"},"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of XTrain: (34680, 12) -> XTrain dataset for fitting the main models\n","Shape of XTrain_PM25: (34680, 13) -> XTrain with target station's PM25 value for fitting the base1/base2 models\n","Shape of yTrain: (34680, 2) -> yTrain dataset for fitting the main/base1/base2 models\n","Shape of XTest: (8520, 12) -> XTest dataset for testing the main models\n","Shape of XTest_PM25: (8520, 13) -> XTest with target stations's PM25 value for testing the base1/base2 models\n","Shape of yTest: (8520, 2) -> yTest dataset for testing the moain/base1/base2 models\n"]}],"source":["# Reading files\n","XTrain_path = r'/content/drive/MyDrive/shapecorrecteddataforfinals/XTrain.csv'\n","XTrain_path_PM25 = r'/content/drive/MyDrive/shapecorrecteddataforfinals/XTrain_PM25.csv'\n","yTrain_path = r'/content/drive/MyDrive/shapecorrecteddataforfinals/yTrain.csv'\n","XTest_path = r'/content/drive/MyDrive/shapecorrecteddataforfinals/XTest.csv'\n","XTest_path_PM25 = r'/content/drive/MyDrive/shapecorrecteddataforfinals/XTest_PM25.csv'\n","yTest_path = r'/content/drive/MyDrive/shapecorrecteddataforfinals/yTest.csv'\n","\n","XTrain = pd.read_csv(XTrain_path, on_bad_lines='skip')\n","XTrain_PM25 = pd.read_csv(XTrain_path_PM25, on_bad_lines='skip')\n","yTrain = pd.read_csv(yTrain_path, on_bad_lines='skip')\n","\n","XTest = pd.read_csv(XTest_path, on_bad_lines='skip')\n","XTest_PM25 = pd.read_csv(XTest_path_PM25, on_bad_lines='skip')\n","yTest = pd.read_csv(yTest_path, on_bad_lines='skip')\n","\n","print('Shape of XTrain: ' + str(XTrain.shape) + ' -> XTrain dataset for fitting the main models')\n","print('Shape of XTrain_PM25: ' + str(XTrain_PM25.shape) + \" -> XTrain with target station's PM25 value for fitting the base1/base2 models\")\n","print('Shape of yTrain: ' + str(yTrain.shape) + ' -> yTrain dataset for fitting the main/base1/base2 models')\n","\n","print('Shape of XTest: ' + str(XTest.shape) + ' -> XTest dataset for testing the main models')\n","print('Shape of XTest_PM25: ' + str(XTest_PM25.shape) + \" -> XTest with target stations's PM25 value for testing the base1/base2 models\")\n","print('Shape of yTest: ' + str(yTest.shape) + ' -> yTest dataset for testing the moain/base1/base2 models')"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":70,"status":"ok","timestamp":1670476617923,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"},"user_tz":420},"id":"xhp-6EbHrUe8","colab":{"base_uri":"https://localhost:8080/","height":140},"outputId":"162ff46b-e704-40ec-d439-f26c2b43753c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\n# Clipping PM25 data\\n# Small subset of PM25 value is much higher than average\\n# Clip PM25 values to 0~100 (Over 100 is very poor according to the EPA)\\ncolumns=['Upland_PM25', 'Lake_Elsinore_PM25', 'Temecula_PM25', 'Banning_PM25', 'Central_San_Bernardino_PM25']\\ncolumns2 = ['PM25', 'Upland_PM25', 'Lake_Elsinore_PM25', 'Temecula_PM25', 'Banning_PM25', 'Central_San_Bernardino_PM25']\\n\\nXTrain[columns] = np.clip(XTrain[columns], a_min=0, a_max=100)\\nXTrain_PM25[columns2] = np.clip(XTrain_PM25[columns2], a_min=0, a_max=100)\\nXTest[columns] = np.clip(XTest[columns], a_min=0, a_max=100)\\nXTest_PM25[columns2] = np.clip(XTest_PM25[columns2], a_min=0, a_max=100)\\n\\nyTrain['PM25'] = np.clip(yTrain['PM25'], a_min=0, a_max=100)\\nyTest['PM25'] = np.clip(yTest['PM25'], a_min=0, a_max=100)\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":4}],"source":["'''\n","# Clipping PM25 data\n","# Small subset of PM25 value is much higher than average\n","# Clip PM25 values to 0~100 (Over 100 is very poor according to the EPA)\n","columns=['Upland_PM25', 'Lake_Elsinore_PM25', 'Temecula_PM25', 'Banning_PM25', 'Central_San_Bernardino_PM25']\n","columns2 = ['PM25', 'Upland_PM25', 'Lake_Elsinore_PM25', 'Temecula_PM25', 'Banning_PM25', 'Central_San_Bernardino_PM25']\n","\n","XTrain[columns] = np.clip(XTrain[columns], a_min=0, a_max=100)\n","XTrain_PM25[columns2] = np.clip(XTrain_PM25[columns2], a_min=0, a_max=100)\n","XTest[columns] = np.clip(XTest[columns], a_min=0, a_max=100)\n","XTest_PM25[columns2] = np.clip(XTest_PM25[columns2], a_min=0, a_max=100)\n","\n","yTrain['PM25'] = np.clip(yTrain['PM25'], a_min=0, a_max=100)\n","yTest['PM25'] = np.clip(yTest['PM25'], a_min=0, a_max=100)\n","'''"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WbjAVFNbrvf2"},"outputs":[],"source":["# Standardization\n","# Standardize the Training data for each column\n","from sklearn.preprocessing import StandardScaler\n","\n","ori_col = [column for column in XTrain.columns if column!='Date Time']\n","ori_col_PM25 = [column for column in XTrain_PM25.columns if column!='Date Time']\n","\n","scaler_train = StandardScaler()\n","scaler_trainPM25 = StandardScaler()\n","\n","scaler_train.fit(XTrain[ori_col])\n","XTrain_std = scaler_train.transform(XTrain[ori_col])\n","XTest_std = scaler_train.transform(XTest[ori_col])\n","\n","scaler_trainPM25.fit(XTrain_PM25[ori_col_PM25])\n","XTrain_PM25_std = scaler_trainPM25.transform(XTrain_PM25[ori_col_PM25])\n","XTest_PM25_std = scaler_trainPM25.transform(XTest_PM25[ori_col_PM25])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":174},"executionInfo":{"elapsed":86,"status":"ok","timestamp":1670476617942,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"},"user_tz":420},"id":"mRzHpB2-r2TM","outputId":"c12ad846-38c5-4555-f915-5c0bb6c47388"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\n# Preparing for time-series train/test data\\n# Rolling the data \\n# For example, XTrain[:167] is matched with yTrain[0], XTrain[1:168] is matched with yTrain[1] and so on\\nwindow = 168\\n\\n# XTrain: shape (34872, 12)\\n# XTrain_ts: shape (34705, 168, 11)\\nXTrain_ts = []\\n\\nfor i in range(len(yTrain)):\\n  start = i\\n  end = i + window\\n  XTrain_ts.append(XTrain_std[start:end, :])\\n\\nXTrain_ts = np.array(XTrain_ts)\\nprint('Shape of XTrain: ' + str(XTrain_ts.shape))\\n\\n\\n# XTrain_PM25: shape (34872, 13)\\n# XTrain_PM25_ts: shape (34705, 168, 12)\\nXTrain_PM25_ts = []\\n\\nfor i in range(len(yTrain)):\\n  start = i\\n  end = i + window\\n  XTrain_PM25_ts.append(XTrain_PM25_std[start:end, :])\\n\\nXTrain_PM25_ts = np.array(XTrain_PM25_ts)\\nprint('Shape of XTrain_PM25: ' + str(XTrain_PM25_ts.shape))\\n\\n\\n# XTest: shape (8712, 12)\\n# XTest_ts: shape (8545, 168, 11)\\nXTest_ts = []\\n\\nfor i in range(len(yTest)):\\n  start = i\\n  end = i + window\\n  XTest_ts.append(XTest_std[start:end, :])\\n\\nXTest_ts = np.array(XTest_ts)\\nprint('Shape of XTest: ' + str(XTest_ts.shape))\\n\\n\\n# XTest_PM25: shape (34872, 13)\\n# XTest_PM25_ts: shape (34705, 168, 12)\\nXTest_PM25_ts = []\\n\\nfor i in range(len(yTest)):\\n  start = i\\n  end = i + window\\n  XTest_PM25_ts.append(XTest_PM25_std[start:end, :])\\n\\nXTest_PM25_ts = np.array(XTest_PM25_ts)\\nprint('Shape of XTest_PM25: ' + str(XTest_PM25_ts.shape))\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":6}],"source":["'''\n","# Preparing for time-series train/test data\n","# Rolling the data \n","# For example, XTrain[:167] is matched with yTrain[0], XTrain[1:168] is matched with yTrain[1] and so on\n","window = 168\n","\n","# XTrain: shape (34872, 12)\n","# XTrain_ts: shape (34705, 168, 11)\n","XTrain_ts = []\n","\n","for i in range(len(yTrain)):\n","  start = i\n","  end = i + window\n","  XTrain_ts.append(XTrain_std[start:end, :])\n","\n","XTrain_ts = np.array(XTrain_ts)\n","print('Shape of XTrain: ' + str(XTrain_ts.shape))\n","\n","\n","# XTrain_PM25: shape (34872, 13)\n","# XTrain_PM25_ts: shape (34705, 168, 12)\n","XTrain_PM25_ts = []\n","\n","for i in range(len(yTrain)):\n","  start = i\n","  end = i + window\n","  XTrain_PM25_ts.append(XTrain_PM25_std[start:end, :])\n","\n","XTrain_PM25_ts = np.array(XTrain_PM25_ts)\n","print('Shape of XTrain_PM25: ' + str(XTrain_PM25_ts.shape))\n","\n","\n","# XTest: shape (8712, 12)\n","# XTest_ts: shape (8545, 168, 11)\n","XTest_ts = []\n","\n","for i in range(len(yTest)):\n","  start = i\n","  end = i + window\n","  XTest_ts.append(XTest_std[start:end, :])\n","\n","XTest_ts = np.array(XTest_ts)\n","print('Shape of XTest: ' + str(XTest_ts.shape))\n","\n","\n","# XTest_PM25: shape (34872, 13)\n","# XTest_PM25_ts: shape (34705, 168, 12)\n","XTest_PM25_ts = []\n","\n","for i in range(len(yTest)):\n","  start = i\n","  end = i + window\n","  XTest_PM25_ts.append(XTest_PM25_std[start:end, :])\n","\n","XTest_PM25_ts = np.array(XTest_PM25_ts)\n","print('Shape of XTest_PM25: ' + str(XTest_PM25_ts.shape))\n","'''"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":140},"executionInfo":{"elapsed":90,"status":"ok","timestamp":1670476617948,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"},"user_tz":420},"id":"ROfN0XDNr2kl","outputId":"52f121a1-9d94-4d3a-aca7-1227be206828"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\n# Reshaping the input data to make it fit for CNN models\\n# Reshaping a sample data from (168, 11) to (24, 7, 11)\\n# Since there is a strong relationship every 24 hours, we decided to reshape the data to (24, 7, 11)\\n# Input data shape: (no of samples, hours, day, no of features)\\n\\nXTrain_ts = XTrain_ts.reshape((XTrain_ts.shape))\\nXTrain_PM25_ts = XTrain_PM25_ts.reshape((XTrain_PM25_ts.shape))\\nXTest_ts = XTest_ts.reshape((XTest_ts.shape))\\nXTest_PM25_ts = XTest_PM25_ts.reshape((XTest_PM25_ts.shape))\\n\\nprint('Shape of XTrain: ' + str(XTrain_ts.shape))\\nprint('Shape of XTrain_PM25: ' + str(XTrain_PM25_ts.shape))\\nprint('Shape of XTest: ' + str(XTest_ts.shape))\\nprint('Shape of XTest_PM25: ' + str(XTest_PM25_ts.shape))\\n\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":7}],"source":["'''\n","# Reshaping the input data to make it fit for CNN models\n","# Reshaping a sample data from (168, 11) to (24, 7, 11)\n","# Since there is a strong relationship every 24 hours, we decided to reshape the data to (24, 7, 11)\n","# Input data shape: (no of samples, hours, day, no of features)\n","\n","XTrain_ts = XTrain_ts.reshape((XTrain_ts.shape))\n","XTrain_PM25_ts = XTrain_PM25_ts.reshape((XTrain_PM25_ts.shape))\n","XTest_ts = XTest_ts.reshape((XTest_ts.shape))\n","XTest_PM25_ts = XTest_PM25_ts.reshape((XTest_PM25_ts.shape))\n","\n","print('Shape of XTrain: ' + str(XTrain_ts.shape))\n","print('Shape of XTrain_PM25: ' + str(XTrain_PM25_ts.shape))\n","print('Shape of XTest: ' + str(XTest_ts.shape))\n","print('Shape of XTest_PM25: ' + str(XTest_PM25_ts.shape))\n","\n","'''"]},{"cell_type":"code","source":["print(XTrain.shape)\n","print(XTrain_PM25.shape)\n","print(XTest.shape)\n","print(XTest_PM25.shape)\n","print(yTrain.shape)\n","print(yTest.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JbpoynAjAunC","executionInfo":{"status":"ok","timestamp":1670479410370,"user_tz":420,"elapsed":324,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"}},"outputId":"4887a69a-07ff-4872-ccba-f071fe647d27"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(34680, 12)\n","(34680, 13)\n","(8520, 12)\n","(8520, 13)\n","(34680, 2)\n","(8520, 2)\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8AdZLrWFMpQk"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from pathlib import Path\n","import os\n","from tqdm import tqdm\n","import random\n","import seaborn as sns\n","import math\n","import warnings\n","warnings.filterwarnings('ignore')\n","from sklearn.model_selection import train_test_split\n","import xgboost as xgb\n","import gc"]},{"cell_type":"markdown","metadata":{"id":"3HvIJbyzFmce"},"source":["### LightGBM +CatBoost model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4066,"status":"ok","timestamp":1670479435098,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"},"user_tz":420},"id":"oHQHdNOE-ZFF","outputId":"d50954a1-42ee-410d-f640-b83adf90748d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: catboost in /usr/local/lib/python3.8/dist-packages (1.1.1)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.8/dist-packages (from catboost) (1.7.3)\n","Requirement already satisfied: six in /usr/local/lib/python3.8/dist-packages (from catboost) (1.15.0)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.8/dist-packages (from catboost) (0.10.1)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.8/dist-packages (from catboost) (3.2.2)\n","Requirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.8/dist-packages (from catboost) (1.3.5)\n","Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.8/dist-packages (from catboost) (1.21.6)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.8/dist-packages (from catboost) (5.5.0)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.8/dist-packages (from pandas>=0.24.0->catboost) (2.8.2)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.8/dist-packages (from pandas>=0.24.0->catboost) (2022.6)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.8/dist-packages (from matplotlib->catboost) (3.0.9)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.8/dist-packages (from matplotlib->catboost) (0.11.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.8/dist-packages (from matplotlib->catboost) (1.4.4)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.8/dist-packages (from plotly->catboost) (8.1.0)\n"]}],"source":["!pip install catboost"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7534,"status":"ok","timestamp":1670479445927,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"},"user_tz":420},"id":"NKfkIZ_5s8a-","outputId":"24031a60-94cc-4e67-8b92-4c453ce5e997"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: LazyProphet in /usr/local/lib/python3.8/dist-packages (0.3.8)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.8/dist-packages (from LazyProphet) (1.21.6)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.8/dist-packages (from LazyProphet) (3.2.2)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.8/dist-packages (from LazyProphet) (1.3.5)\n","Requirement already satisfied: optuna in /usr/local/lib/python3.8/dist-packages (from LazyProphet) (3.0.4)\n","Requirement already satisfied: lightgbm in /usr/local/lib/python3.8/dist-packages (from LazyProphet) (2.2.3)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.8/dist-packages (from LazyProphet) (1.0.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.8/dist-packages (from LazyProphet) (1.7.3)\n","Requirement already satisfied: statsmodels in /usr/local/lib/python3.8/dist-packages (from LazyProphet) (0.12.2)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.8/dist-packages (from matplotlib->LazyProphet) (3.0.9)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.8/dist-packages (from matplotlib->LazyProphet) (2.8.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.8/dist-packages (from matplotlib->LazyProphet) (0.11.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.8/dist-packages (from matplotlib->LazyProphet) (1.4.4)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.8/dist-packages (from python-dateutil>=2.1->matplotlib->LazyProphet) (1.15.0)\n","Requirement already satisfied: cmaes>=0.8.2 in /usr/local/lib/python3.8/dist-packages (from optuna->LazyProphet) (0.9.0)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.8/dist-packages (from optuna->LazyProphet) (6.0)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.8/dist-packages (from optuna->LazyProphet) (21.3)\n","Requirement already satisfied: colorlog in /usr/local/lib/python3.8/dist-packages (from optuna->LazyProphet) (6.7.0)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.8/dist-packages (from optuna->LazyProphet) (4.64.1)\n","Requirement already satisfied: importlib-metadata<5.0.0 in /usr/local/lib/python3.8/dist-packages (from optuna->LazyProphet) (4.13.0)\n","Requirement already satisfied: sqlalchemy>=1.3.0 in /usr/local/lib/python3.8/dist-packages (from optuna->LazyProphet) (1.4.44)\n","Requirement already satisfied: cliff in /usr/local/lib/python3.8/dist-packages (from optuna->LazyProphet) (4.1.0)\n","Requirement already satisfied: alembic>=1.5.0 in /usr/local/lib/python3.8/dist-packages (from optuna->LazyProphet) (1.8.1)\n","Requirement already satisfied: importlib-resources in /usr/local/lib/python3.8/dist-packages (from alembic>=1.5.0->optuna->LazyProphet) (5.10.0)\n","Requirement already satisfied: Mako in /usr/local/lib/python3.8/dist-packages (from alembic>=1.5.0->optuna->LazyProphet) (1.2.4)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.8/dist-packages (from importlib-metadata<5.0.0->optuna->LazyProphet) (3.11.0)\n","Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.8/dist-packages (from sqlalchemy>=1.3.0->optuna->LazyProphet) (2.0.1)\n","Requirement already satisfied: stevedore>=2.0.1 in /usr/local/lib/python3.8/dist-packages (from cliff->optuna->LazyProphet) (4.1.1)\n","Requirement already satisfied: autopage>=0.4.0 in /usr/local/lib/python3.8/dist-packages (from cliff->optuna->LazyProphet) (0.5.1)\n","Requirement already satisfied: PrettyTable>=0.7.2 in /usr/local/lib/python3.8/dist-packages (from cliff->optuna->LazyProphet) (3.5.0)\n","Requirement already satisfied: cmd2>=1.0.0 in /usr/local/lib/python3.8/dist-packages (from cliff->optuna->LazyProphet) (2.4.2)\n","Requirement already satisfied: wcwidth>=0.1.7 in /usr/local/lib/python3.8/dist-packages (from cmd2>=1.0.0->cliff->optuna->LazyProphet) (0.2.5)\n","Requirement already satisfied: attrs>=16.3.0 in /usr/local/lib/python3.8/dist-packages (from cmd2>=1.0.0->cliff->optuna->LazyProphet) (22.1.0)\n","Requirement already satisfied: pyperclip>=1.6 in /usr/local/lib/python3.8/dist-packages (from cmd2>=1.0.0->cliff->optuna->LazyProphet) (1.8.2)\n","Requirement already satisfied: pbr!=2.1.0,>=2.0.0 in /usr/local/lib/python3.8/dist-packages (from stevedore>=2.0.1->cliff->optuna->LazyProphet) (5.11.0)\n","Requirement already satisfied: MarkupSafe>=0.9.2 in /usr/local/lib/python3.8/dist-packages (from Mako->alembic>=1.5.0->optuna->LazyProphet) (2.0.1)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.8/dist-packages (from pandas->LazyProphet) (2022.6)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.8/dist-packages (from scikit-learn->LazyProphet) (1.2.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.8/dist-packages (from scikit-learn->LazyProphet) (3.1.0)\n","Requirement already satisfied: patsy>=0.5 in /usr/local/lib/python3.8/dist-packages (from statsmodels->LazyProphet) (0.5.3)\n"]}],"source":["!pip install LazyProphet"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hWXYhDsIMz4d"},"outputs":[],"source":["def reduce_mem_usage(df):\n","    \"\"\" iterate through all the columns of a dataframe and modify the data type\n","        to reduce memory usage.        \n","    \"\"\"\n","    start_mem = df.memory_usage().sum() / 1024**2\n","    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n","    \n","    for col in df.columns:\n","        col_type = df[col].dtype\n","        \n","        if col_type != object:\n","            c_min = df[col].min()\n","            c_max = df[col].max()\n","            if str(col_type)[:3] == 'int':\n","                if c_min > np.iinfo(np.int8).min and c_max <                  np.iinfo(np.int8).max:\n","                    df[col] = df[col].astype(np.int8)\n","                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n","                    df[col] = df[col].astype(np.int16)\n","                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n","                    df[col] = df[col].astype(np.int32)\n","                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n","                    df[col] = df[col].astype(np.int64)  \n","            else:\n","                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","                    df[col] = df[col].astype(np.float16)\n","                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n","                    df[col] = df[col].astype(np.float32)\n","                else:\n","                    df[col] = df[col].astype(np.float64)\n","        else:\n","            df[col] = df[col].astype('category')\n","\n","    end_mem = df.memory_usage().sum() / 1024**2\n","    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n","    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) / start_mem))\n","    \n","    return df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":315,"status":"ok","timestamp":1670476631016,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"},"user_tz":420},"id":"aIYa7OfmM-JI","outputId":"8e127000-76f3-4585-fb94-84a4a4450bb8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":13}],"source":["#train = pd.read_pickle(XTrain_path)\n","#train = reduce_mem_usage(XTrain_path)\n","gc.collect()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":551,"status":"ok","timestamp":1670479478151,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"},"user_tz":420},"id":"QkQlP8CbPlJy","outputId":"0b8023fa-9be1-4046-f357-982e8bb6cb7e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["4    4968\n","3    4968\n","5    4958\n","2    4954\n","1    4944\n","7    4944\n","6    4944\n","Name: Week, dtype: int64"]},"metadata":{},"execution_count":9}],"source":["import datetime as dt\n","XTrain['date'] = XTrain['Date Time'].apply(lambda x: dt.datetime.strptime(x,\"%Y-%m-%d %H:%M:%S\"))\n","\n","XTrain['Year'] = XTrain['date'].dt.year\n","XTrain['Month'] = XTrain['date'].dt.month\n","XTrain['Day'] = XTrain['date'].dt.day_name()\n","\n","XTrain['Week']=XTrain['Day'].map({'Sunday': 1,'Saturday': 2,'Friday': 3,'Thursday': 4,'Wednesday': 5,'Tuesday':6, 'Monday':7, '':0})\n","XTrain['Week'].value_counts()"]},{"cell_type":"code","source":["XTrain"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":852},"id":"KtObkBOejxQi","executionInfo":{"status":"ok","timestamp":1670476804516,"user_tz":420,"elapsed":522,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"}},"outputId":"27483c56-4891-43db-fd96-b9be3fbda575"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 Date Time    CO    O3     WD   NO2     T    WS  Upland_PM25  \\\n","0      2017-01-25 10:00:00  1.19  22.0  294.4  17.0  51.2   2.3         19.0   \n","1      2017-01-25 11:00:00  1.17  26.0  251.6  14.0  53.9   2.8         19.0   \n","2      2017-01-25 12:00:00  1.15  34.0  286.2  10.0  54.9   4.3         16.0   \n","3      2017-01-25 13:00:00  1.11  39.0  278.1   8.0  56.3   4.1         14.0   \n","4      2017-01-25 14:00:00  1.08  43.0  223.4   6.0  57.9   2.9         17.0   \n","...                    ...   ...   ...    ...   ...   ...   ...          ...   \n","34675  2021-01-09 05:00:00  2.00   1.0   90.0  22.0  40.0   1.0         16.0   \n","34676  2021-01-09 06:00:00  2.00   2.0  146.0  24.0  39.0   1.0         25.0   \n","34677  2021-01-09 07:00:00  2.00   2.0  270.0  24.0  40.0   0.0         22.0   \n","34678  2021-01-09 08:00:00  1.00   6.0  207.0  29.0  47.0   5.0         25.0   \n","34679  2021-01-09 09:00:00  1.00  38.0  328.0   4.0  64.0  21.0         33.0   \n","\n","       Lake_Elsinore_PM25  Temecula_PM25  Banning_PM25  \\\n","0                    14.0           12.0           5.0   \n","1                    15.0           13.0           5.0   \n","2                    13.0           13.0           5.0   \n","3                    13.0           11.0           5.0   \n","4                    13.0           10.0           5.0   \n","...                   ...            ...           ...   \n","34675                21.0           12.0          13.0   \n","34676                23.0           10.0          15.0   \n","34677                22.0           11.0          10.0   \n","34678                27.0           22.0          12.0   \n","34679                13.0           19.0          12.0   \n","\n","       Central_San_Bernardino_PM25                date  Year  Month  \\\n","0                             15.0 2017-01-25 10:00:00  2017      1   \n","1                             15.0 2017-01-25 11:00:00  2017      1   \n","2                             15.0 2017-01-25 12:00:00  2017      1   \n","3                             15.0 2017-01-25 13:00:00  2017      1   \n","4                             15.0 2017-01-25 14:00:00  2017      1   \n","...                            ...                 ...   ...    ...   \n","34675                         15.0 2021-01-09 05:00:00  2021      1   \n","34676                         18.0 2021-01-09 06:00:00  2021      1   \n","34677                         20.0 2021-01-09 07:00:00  2021      1   \n","34678                         19.0 2021-01-09 08:00:00  2021      1   \n","34679                         19.0 2021-01-09 09:00:00  2021      1   \n","\n","             Day  Week  \n","0      Wednesday     5  \n","1      Wednesday     5  \n","2      Wednesday     5  \n","3      Wednesday     5  \n","4      Wednesday     5  \n","...          ...   ...  \n","34675   Saturday     2  \n","34676   Saturday     2  \n","34677   Saturday     2  \n","34678   Saturday     2  \n","34679   Saturday     2  \n","\n","[34680 rows x 17 columns]"],"text/html":["\n","  <div id=\"df-63fe486c-cfe5-44f3-ad34-6479a737d417\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date Time</th>\n","      <th>CO</th>\n","      <th>O3</th>\n","      <th>WD</th>\n","      <th>NO2</th>\n","      <th>T</th>\n","      <th>WS</th>\n","      <th>Upland_PM25</th>\n","      <th>Lake_Elsinore_PM25</th>\n","      <th>Temecula_PM25</th>\n","      <th>Banning_PM25</th>\n","      <th>Central_San_Bernardino_PM25</th>\n","      <th>date</th>\n","      <th>Year</th>\n","      <th>Month</th>\n","      <th>Day</th>\n","      <th>Week</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2017-01-25 10:00:00</td>\n","      <td>1.19</td>\n","      <td>22.0</td>\n","      <td>294.4</td>\n","      <td>17.0</td>\n","      <td>51.2</td>\n","      <td>2.3</td>\n","      <td>19.0</td>\n","      <td>14.0</td>\n","      <td>12.0</td>\n","      <td>5.0</td>\n","      <td>15.0</td>\n","      <td>2017-01-25 10:00:00</td>\n","      <td>2017</td>\n","      <td>1</td>\n","      <td>Wednesday</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2017-01-25 11:00:00</td>\n","      <td>1.17</td>\n","      <td>26.0</td>\n","      <td>251.6</td>\n","      <td>14.0</td>\n","      <td>53.9</td>\n","      <td>2.8</td>\n","      <td>19.0</td>\n","      <td>15.0</td>\n","      <td>13.0</td>\n","      <td>5.0</td>\n","      <td>15.0</td>\n","      <td>2017-01-25 11:00:00</td>\n","      <td>2017</td>\n","      <td>1</td>\n","      <td>Wednesday</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2017-01-25 12:00:00</td>\n","      <td>1.15</td>\n","      <td>34.0</td>\n","      <td>286.2</td>\n","      <td>10.0</td>\n","      <td>54.9</td>\n","      <td>4.3</td>\n","      <td>16.0</td>\n","      <td>13.0</td>\n","      <td>13.0</td>\n","      <td>5.0</td>\n","      <td>15.0</td>\n","      <td>2017-01-25 12:00:00</td>\n","      <td>2017</td>\n","      <td>1</td>\n","      <td>Wednesday</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2017-01-25 13:00:00</td>\n","      <td>1.11</td>\n","      <td>39.0</td>\n","      <td>278.1</td>\n","      <td>8.0</td>\n","      <td>56.3</td>\n","      <td>4.1</td>\n","      <td>14.0</td>\n","      <td>13.0</td>\n","      <td>11.0</td>\n","      <td>5.0</td>\n","      <td>15.0</td>\n","      <td>2017-01-25 13:00:00</td>\n","      <td>2017</td>\n","      <td>1</td>\n","      <td>Wednesday</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2017-01-25 14:00:00</td>\n","      <td>1.08</td>\n","      <td>43.0</td>\n","      <td>223.4</td>\n","      <td>6.0</td>\n","      <td>57.9</td>\n","      <td>2.9</td>\n","      <td>17.0</td>\n","      <td>13.0</td>\n","      <td>10.0</td>\n","      <td>5.0</td>\n","      <td>15.0</td>\n","      <td>2017-01-25 14:00:00</td>\n","      <td>2017</td>\n","      <td>1</td>\n","      <td>Wednesday</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>34675</th>\n","      <td>2021-01-09 05:00:00</td>\n","      <td>2.00</td>\n","      <td>1.0</td>\n","      <td>90.0</td>\n","      <td>22.0</td>\n","      <td>40.0</td>\n","      <td>1.0</td>\n","      <td>16.0</td>\n","      <td>21.0</td>\n","      <td>12.0</td>\n","      <td>13.0</td>\n","      <td>15.0</td>\n","      <td>2021-01-09 05:00:00</td>\n","      <td>2021</td>\n","      <td>1</td>\n","      <td>Saturday</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>34676</th>\n","      <td>2021-01-09 06:00:00</td>\n","      <td>2.00</td>\n","      <td>2.0</td>\n","      <td>146.0</td>\n","      <td>24.0</td>\n","      <td>39.0</td>\n","      <td>1.0</td>\n","      <td>25.0</td>\n","      <td>23.0</td>\n","      <td>10.0</td>\n","      <td>15.0</td>\n","      <td>18.0</td>\n","      <td>2021-01-09 06:00:00</td>\n","      <td>2021</td>\n","      <td>1</td>\n","      <td>Saturday</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>34677</th>\n","      <td>2021-01-09 07:00:00</td>\n","      <td>2.00</td>\n","      <td>2.0</td>\n","      <td>270.0</td>\n","      <td>24.0</td>\n","      <td>40.0</td>\n","      <td>0.0</td>\n","      <td>22.0</td>\n","      <td>22.0</td>\n","      <td>11.0</td>\n","      <td>10.0</td>\n","      <td>20.0</td>\n","      <td>2021-01-09 07:00:00</td>\n","      <td>2021</td>\n","      <td>1</td>\n","      <td>Saturday</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>34678</th>\n","      <td>2021-01-09 08:00:00</td>\n","      <td>1.00</td>\n","      <td>6.0</td>\n","      <td>207.0</td>\n","      <td>29.0</td>\n","      <td>47.0</td>\n","      <td>5.0</td>\n","      <td>25.0</td>\n","      <td>27.0</td>\n","      <td>22.0</td>\n","      <td>12.0</td>\n","      <td>19.0</td>\n","      <td>2021-01-09 08:00:00</td>\n","      <td>2021</td>\n","      <td>1</td>\n","      <td>Saturday</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>34679</th>\n","      <td>2021-01-09 09:00:00</td>\n","      <td>1.00</td>\n","      <td>38.0</td>\n","      <td>328.0</td>\n","      <td>4.0</td>\n","      <td>64.0</td>\n","      <td>21.0</td>\n","      <td>33.0</td>\n","      <td>13.0</td>\n","      <td>19.0</td>\n","      <td>12.0</td>\n","      <td>19.0</td>\n","      <td>2021-01-09 09:00:00</td>\n","      <td>2021</td>\n","      <td>1</td>\n","      <td>Saturday</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>34680 rows × 17 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-63fe486c-cfe5-44f3-ad34-6479a737d417')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-63fe486c-cfe5-44f3-ad34-6479a737d417 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-63fe486c-cfe5-44f3-ad34-6479a737d417');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["XTrain.drop(columns=['Date Time', 'date', 'Week', 'Day'], inplace=True)"],"metadata":{"id":"WErazrEFkWXS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y = yTrain['PM25']\n","yT = yTest['PM25']"],"metadata":{"id":"Y1BcLh53lWYO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["yT.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8Pvp4aeZJLsh","executionInfo":{"status":"ok","timestamp":1670479489936,"user_tz":420,"elapsed":349,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"}},"outputId":"f0801693-7a76-4d0e-dd42-e7537ebd2f36"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0     8.0\n","1     9.0\n","2    10.0\n","3    10.0\n","4    10.0\n","Name: PM25, dtype: float64"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["import datetime as dt\n","XTest['date'] = XTest['Date Time'].apply(lambda x: dt.datetime.strptime(x,\"%Y-%m-%d %H:%M:%S\"))\n","\n","XTest['Year'] = XTest['date'].dt.year\n","XTest['Month'] = XTest['date'].dt.month\n","XTest['Day'] = XTest['date'].dt.day_name()\n","\n","XTest['Week']=XTest['Day'].map({'Sunday': 1,'Saturday': 2,'Friday': 3,'Thursday': 4,'Wednesday': 5,'Tuesday':6, 'Monday':7, '':0})\n","XTest['Week'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9l6hnL5Xm_Lx","executionInfo":{"status":"ok","timestamp":1670479493099,"user_tz":420,"elapsed":332,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"}},"outputId":"a4ed156d-0e99-4101-f359-9282da1ae00e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6    1224\n","5    1224\n","4    1224\n","3    1224\n","7    1214\n","2    1210\n","1    1200\n","Name: Week, dtype: int64"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["XTest.drop(columns=['Date Time', 'date', 'Week', 'Day'], inplace=True)"],"metadata":{"id":"gb0o08nVoDu6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import r2_score"],"metadata":{"id":"2RTDd0ijENps"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import mean_squared_error"],"metadata":{"id":"UcERMGBwDL9G"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"w1h8CpY7RpW2"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LswGSxOFOFY3"},"outputs":[],"source":["from xgboost import XGBRegressor\n","from sklearn.model_selection import GridSearchCV\n","\n","xgb_regr = XGBRegressor(objective='count:poisson', n_estimators= 1000,max_depth= 5, learning_rate= 0.080, gamma= 0.9, colsample_bytree= 0.8)\n","xgb_regr.fit(XTrain, y)\n","\n","#defining the predicted variables\n","pred_xgb_test1 = xgb_regr.predict(XTest)\n","#pred_xgb_test = xgb_regr.predict(yT)"]},{"cell_type":"code","source":["np.any(np.isnan(yT))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bv4hTq9_MewH","executionInfo":{"status":"ok","timestamp":1670479522787,"user_tz":420,"elapsed":21,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"}},"outputId":"beddb4ac-4f17-447b-bab0-d6d00028b53d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["np.any(np.isnan(pred_xgb_test1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ds96-k1fMkcN","executionInfo":{"status":"ok","timestamp":1670479530289,"user_tz":420,"elapsed":887,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"}},"outputId":"180f83fa-1d9a-482c-8a07-c58229ca334f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["MSE_test = mean_squared_error(yT, pred_xgb_test1)\n","print(f'MSE= {MSE_test}')\n","\n","RMSE_test = np.sqrt(MSE_test)\n","print(f'RMSE= {RMSE_test}')\n","\n","R2_Score = r2_score(yT, pred_xgb_test1)\n","print(f'R2_Score_test = {R2_Score}')\n","\n","print(\"Y_test for XGBRegressor - \",pred_xgb_test1)\n","#model.fit(XTrain, y, early_stopping_rounds=10, eval_set=[(XTest, yT)], verbose=1)\n","#xgb_grid= GridSearchCV(xgb_regr,param_grid=params,verbose=0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":381},"id":"GcfLHTYdJsM8","executionInfo":{"status":"error","timestamp":1670479543707,"user_tz":420,"elapsed":429,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"}},"outputId":"13e98fcc-b428-4111-b7d8-9e5578db532b"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-301779a41435>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mMSE_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmean_squared_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0myT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpred_xgb_test1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'MSE= {MSE_test}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mRMSE_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMSE_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'RMSE= {RMSE_test}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_regression.py\u001b[0m in \u001b[0;36mmean_squared_error\u001b[0;34m(y_true, y_pred, sample_weight, multioutput, squared)\u001b[0m\n\u001b[1;32m    436\u001b[0m     \u001b[0;36m0.825\u001b[0m\u001b[0;34m...\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    437\u001b[0m     \"\"\"\n\u001b[0;32m--> 438\u001b[0;31m     y_type, y_true, y_pred, multioutput = _check_reg_targets(\n\u001b[0m\u001b[1;32m    439\u001b[0m         \u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmultioutput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    440\u001b[0m     )\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_regression.py\u001b[0m in \u001b[0;36m_check_reg_targets\u001b[0;34m(y_true, y_pred, multioutput, dtype)\u001b[0m\n\u001b[1;32m     94\u001b[0m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[0my_true\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 96\u001b[0;31m     \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     97\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0my_true\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    798\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    799\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mforce_all_finite\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 800\u001b[0;31m             \u001b[0m_assert_all_finite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_nan\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mforce_all_finite\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"allow-nan\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    801\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    802\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mensure_min_samples\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m_assert_all_finite\u001b[0;34m(X, allow_nan, msg_dtype)\u001b[0m\n\u001b[1;32m    112\u001b[0m         ):\n\u001b[1;32m    113\u001b[0m             \u001b[0mtype_err\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"infinity\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mallow_nan\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"NaN, infinity\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 114\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    115\u001b[0m                 msg_err.format(\n\u001b[1;32m    116\u001b[0m                     \u001b[0mtype_err\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmsg_dtype\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mmsg_dtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Input contains NaN, infinity or a value too large for dtype('float32')."]}]},{"cell_type":"code","source":[],"metadata":{"id":"ZOYe-UuxoB5f"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":357},"executionInfo":{"elapsed":2387,"status":"error","timestamp":1670479942581,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"},"user_tz":420},"id":"4VOkzVMGs8fC","outputId":"e2d41d26-66ec-4b67-bb95-29b64eafd337"},"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-3d249aad07b1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      9\u001b[0m                           return_proba=True)\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mfitted\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlp_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0myT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0mpredicted_class\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlp_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/LazyProphet/LazyProphet.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, y, X)\u001b[0m\n\u001b[1;32m    231\u001b[0m         \u001b[0;31m# self.model_obj.fit(self.X[:, self.columns], self.scaled_y.reshape(-1, ))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    232\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturn_proba\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 233\u001b[0;31m             \u001b[0mfitted\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    234\u001b[0m             \u001b[0mfitted\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfitted\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    235\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'LGBMRegressor' object has no attribute 'predict_proba'"]}],"source":["from LazyProphet import LazyProphet as lp\n","\n","lp_model = lp.LazyProphet(seasonal_period=[24],\n","                          n_basis=10,\n","                          objective='regression',\n","                          fourier_order=5,\n","                          decay=.99,\n","                          #ar=3,\n","                          return_proba=True)\n","\n","fitted = lp_model.fit(yT)\n","predicted_class = lp_model.predict(100)\n","plt.plot(y)\n","plt.plot(np.append(fitted, predicted_class), alpha=.5)\n","plt.axvline(800)\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LJEt05wls8i_"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":409},"executionInfo":{"elapsed":8415,"status":"error","timestamp":1670480099766,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"},"user_tz":420},"id":"Rtd2aPVx-b7K","outputId":"201ba90c-479e-459e-b8b0-65b3b8b54b85"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","================Evalution Matrix=========================\n","\n","MSE : 74.11057548533006\n","RMSE : 8.608749937437494\n","R2 : 0.5011163884888207\n","Adjusted R2 :  0.5003539282313971\n","\n","================Evalution Matrix=========================\n","\n"]},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-22-50814eb62b0a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\n================Evalution Matrix=========================\\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m \u001b[0mmean_sq_error\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMSE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0mroot_mean_sq_error\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mRMSE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0mr2_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'mean_sq_error' is not defined"]}],"source":["#importing cat boost Regressor\n","from catboost import CatBoostRegressor\n","\n","# creating Catboost model\n","model=CatBoostRegressor(verbose=0)\n","\n","# Fit Model\n","model.fit(XTrain,y)\n","    \n","# Get Metrics    \n","preds = model.predict(XTest)\n","    \n","import math\n","from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error\n","from sklearn.metrics import r2_score\n","print('\\n================Evalution Matrix=========================\\n')\n","MSE  = mean_squared_error(yT,preds)\n","print(\"MSE :\" , MSE)\n","    \n","RMSE = np.sqrt(MSE)\n","print(\"RMSE :\" ,RMSE)\n","r2 = r2_score(yT,preds)\n","print(\"R2 :\" ,r2)\n","adj_r2=1-(1-r2_score(yT,preds))*((XTest.shape[0]-1)/(XTest.shape[0]-XTest.shape[1]-1))\n","print(\"Adjusted R2 : \",adj_r2)\n","\n","train_class_preds = model.predict(XTrain)\n","\n","print('\\n================Evalution Matrix=========================\\n')"]},{"cell_type":"code","source":["def cal_p(y_hat, y_true):\n","  return 1-np.sum(abs(y_hat-y_true))/np.sum(y_true)\n","\n","\n","fin = pd.DataFrame.from_dict({'MSE': [mean_squared_error(np.array(yTest['PM25']), model_main.predict(XTest_ts))\n","                                      ,mean_squared_error(np.array(yTest['PM25']), model_base2.predict(XTest_PM25_ts))],\n","                              'MAE': [mean_absolute_error(np.array(yTest['PM25']), model_main.predict(XTest_ts))\n","                                     ,mean_absolute_error(np.array(yTest['PM25']), model_base2.predict(XTest_PM25_ts))],\n","                              'P': [cal_p(np.array(yTest['PM25']), model_main.predict(XTest_ts).reshape(-1))\n","                                    ,cal_p(np.array(yTest['PM25']), model_base2.predict(XTest_PM25_ts).reshape(-1))]})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":253},"id":"f8o4uGkAYNz2","executionInfo":{"status":"error","timestamp":1670480194717,"user_tz":420,"elapsed":253,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"}},"outputId":"4c5f46ce-69c9-43fe-a7a5-508aed7dc040"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-24-4355bb6cbddc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m fin = pd.DataFrame.from_dict({'MSE': [mean_squared_error(np.array(yTest['PM25']), model_main.predict(XTest_ts))\n\u001b[0m\u001b[1;32m      6\u001b[0m                                       ,mean_squared_error(np.array(yTest['PM25']), model_base2.predict(XTest_PM25_ts))],\n\u001b[1;32m      7\u001b[0m                               'MAE': [mean_absolute_error(np.array(yTest['PM25']), model_main.predict(XTest_ts))\n","\u001b[0;31mNameError\u001b[0m: name 'model_main' is not defined"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5Mfkfidh-cIZ","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"error","timestamp":1670480171844,"user_tz":420,"elapsed":190,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"}},"outputId":"8011a72d-efab-40f2-f467-8f74231be91d"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-23-7a85fa1e03c3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcal_p\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0myTest\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'PM25'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXTest_tree\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'cal_p' is not defined"]}],"source":["cal_p(np.array(yTest['PM25']), model.predict(XTest_tree).reshape(-1))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uWZMMFEoe7ad"},"outputs":[],"source":["# Correlation with past 7day's target station's PM25 max & target value\n","import seaborn as sns\n","\n","r_y = yTrain[:-24].rolling(168).max()\n","r_y = r_y.dropna(inplace=False).reset_index(drop=True)\n","\n","total = pd.merge(r_y, yTrain[167+24:]['PM25'].rename('target'), left_index=True, right_index=True)\n","total.corr()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4378,"status":"ok","timestamp":1670481673367,"user":{"displayName":"Meghana Vasanth Shettigar","userId":"15338428421420610334"},"user_tz":420},"id":"9V77TJpoXSl_","outputId":"020ad5c4-4564-4530-9bfc-2b8d5313b016"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","================Evalution Matrix=========================\n","\n","MSE : 74.11057548533006\n","RMSE : 8.608749937437494\n","R2 : 0.5011163884888207\n","Adjusted R2 :  0.5003539282313971\n"]}],"source":["import lightgbm as lgb\n","\n","lgbr=lgb.LGBMRegressor(n_estimators= 1000,max_depth= 5, learning_rate= 0.060, gamma= 1, colsample_bytree= 0.8)\n","\n","\n","lgbr.fit(XTrain, y)\n","\n","pred = model.predict(XTest)\n","    \n","import math\n","from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error\n","from sklearn.metrics import r2_score\n","print('\\n================Evalution Matrix=========================\\n')\n","MSE  = mean_squared_error(yT,pred)\n","print(\"MSE :\" , MSE)\n","    \n","RMSE = np.sqrt(MSE)\n","print(\"RMSE :\" ,RMSE)\n","r2 = r2_score(yT,pred)\n","print(\"R2 :\" ,r2)\n","adj_r2=1-(1-r2_score(yT,pred))*((XTest.shape[0]-1)/(XTest.shape[0]-XTest.shape[1]-1))\n","print(\"Adjusted R2 : \",adj_r2)\n","\n","\n","# finding the best parameters for XGBRegressor by gridsearchcv\n","#lgbr_para={'n_estimators': [150,200,250],'max_depth': [7,10,13]}\n","#lgbr_grid=GridSearchCV(estimator=lgbr,param_grid=lgbr_para,cv=5,scoring='neg_mean_squared_error',verbose=5,n_jobs=-1)\n","\n","#calling run_model to train,fit and evalution of catboost model\n","#run_model(lgbr_grid,XTrain,y,XTest,yT)\n","\n","#getting and visualizing features importance of catboost model\n","#get_features_importance(lgbr_grid.best_estimator_,X_train)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"X9WGNmzDXSuq"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dVFlw4kSXSyl"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IzMKV1UuXS1k"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YWvHHm3iXS6_"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Kr4K4zGos2Me"},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}